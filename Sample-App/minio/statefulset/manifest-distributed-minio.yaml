#ubuntu@opsmgr-02:~/yaml/minio$ helm fetch bitnami/minio
#ubuntu@opsmgr-02:~/yaml/minio$ h elm install minio -f minio-values.yaml ./minio
#ubuntu@opsmgr-02:~/yaml/minio$ helm get manifest minio


---
# Source: minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio
  namespace: default
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-3.4.21
    app.kubernetes.io/instance: minio
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: minio
---
# Source: minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: minio
  namespace: default
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-3.4.21
    app.kubernetes.io/instance: minio
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  access-key: "xxx"
  secret-key: "xxx"
---
# Source: minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: default
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-3.4.21
    app.kubernetes.io/instance: minio
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: minio
      port: 9000
      targetPort: minio
      nodePort: null
  selector:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: minio
---
# Source: minio/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: minio-headless
  namespace: default
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-3.4.21
    app.kubernetes.io/instance: minio
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: minio
      port: 9000
      targetPort: minio
  selector:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: minio
---
# Source: minio/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minio
  namespace: default
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-3.4.21
    app.kubernetes.io/instance: minio
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: minio
      app.kubernetes.io/instance: minio
  serviceName: minio-headless
  replicas: 4
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: minio
        helm.sh/chart: minio-3.4.21
        app.kubernetes.io/instance: minio
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/credentials-secret: 98b36efd27c6ed32228bf50ae5e80f13c9e138eeb857fea90d108dad9cf1ced0
    spec:
      serviceAccountName: minio

      securityContext:
        fsGroup: 1001
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2020.7.24-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MINIO_DISTRIBUTED_MODE_ENABLED
              value: "yes"
            - name: MINIO_SKIP_CLIENT
              value: "yes"
            - name: MINIO_DISTRIBUTED_NODES
              value: minio-0.minio-headless.default.svc.cluster.local,minio-1.minio-headless.default.svc.cluster.local,minio-2.minio-headless.default.svc.cluster.local,minio-3.minio-headless.default.svc.cluster.local,
            - name: MINIO_FORCE_NEW_KEYS
              value: "no"
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio
                  key: access-key
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: minio
                  key: secret-key
            - name: MINIO_BROWSER
              value: "on"
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: public
          ports:
            - name: minio
              containerPort: 9000
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            httpGet:
              path: /minio/health/live
              port: minio
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            tcpSocket:
              port: minio
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /data
      volumes:
        - name: data
          emptyDir: {}